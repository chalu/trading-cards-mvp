/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    /**
     * API Home
     * @description The home endpoint for this API. Displays basic informational message
     */
    get: operations["apiHome"];
  };
  "/search": {
    /**
     * List Cards
     * @description Search for, and list trading game cards that match a search term
     */
    get: operations["searchCards"];
  };
  "/users/auth": {
    /**
     * Authenticate a user
     * @description Authenticate a user with their nickname and password
     */
    post: operations["authenticate"];
  };
  "/favorites": {
    /**
     * Favorite Cards
     * @description Fetch trading game cards marked as favorites
     */
    get: operations["getFavorites"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @default 1
     * @example 1
     */
    PageParam: number;
    /** @example pokey */
    SearchTermParam: string;
    /**
     * @default name
     * @example name
     * @enum {string}
     */
    OrderByParam: "name" | "released";
    /**
     * @default AUTO
     * @example AUTO
     * @enum {string}
     */
    SortDirParam: "ASC" | "DESC" | "AUTO";
    APIWelcome: {
      /** @example Welcome to the API backend for the trading game cards MVP */
      message: string;
    };
    CardImageURIs: {
      /**
       * Format: uri
       * @example https://placehold.co/146x204?text=No+Image
       */
      small?: string;
      /**
       * Format: uri
       * @example https://placehold.co/488x680?text=No+Image
       */
      normal?: string;
      /**
       * Format: uri
       * @example https://placehold.co/666x927?text=No+Image
       */
      large?: string;
    };
    CardPrices: {
      /** @example 0.25 */
      usd?: string;
      /** @example 0.10 */
      eur?: string;
    };
    Card: {
      /** @example d99a9a7d-d9ca-4c11-80ab-e39d5943a315 */
      id: string;
      /** @example en */
      lang: string;
      /** @example Aerial Predation */
      name: string;
      /** @example d99a9a7d-d9ca-4c11-80ab-e39d5943a315 */
      uri: string;
      /** @example rare */
      rarity: string;
      /** @example Modern Horizons */
      set_name: string;
      /** @example 186 */
      collector_number?: number;
      /**
       * Format: date
       * @example "2021-06-18T00:00:00.000Z"
       */
      released_at: string;
      games?: string[];
      image_uris: components["schemas"]["CardImageURIs"];
      nonfoil: boolean;
      foil: boolean;
      prices: components["schemas"]["CardPrices"];
    };
    Pagination: {
      /**
       * @description A link to the next page of responses if one exists
       * @example /search?term=red&page=3
       */
      next?: string;
      /**
       * @description A link to the previous page of responses if one exists
       * @example /search?term=red&page=1
       */
      previous?: string;
    };
    QueryResult: {
      /** @description The total number of cards matching the search query */
      total: number;
      /** @description A page of the cards matching the search query */
      data: components["schemas"]["Card"][];
    };
    CardsQueryResponse: components["schemas"]["QueryResult"] & components["schemas"]["Pagination"];
    AuthAttempt: {
      nickname: string;
      password: string;
    };
    AuthToken: {
      token: string;
    };
    APIError: {
      message?: string;
      path?: string;
    };
    APIResponseError: {
      /** @description The error message from the server */
      message: string;
      code?: number;
      errors?: components["schemas"]["APIError"][];
    };
  };
  responses: never;
  parameters: {
    /** @description The search term to find cards with */
    searchTerm: components["schemas"]["SearchTermParam"];
    /** @description On what property to order the matching cards. Default is `name` */
    orderBy?: components["schemas"]["OrderByParam"];
    /**
     * @description The sort order of the returned cards. Default is `AUTO` Sort order:
     *   * `ASC` - Ascending, from A to Z
     *   * `DESC` - Descending, from Z to A
     *   * `AUTO` - Allow the system choose the most inuitive direction to sort.
     */
    sortDir?: components["schemas"]["SortDirParam"];
    /** @description The page of the matching resultset to return. Default is `1`. */
    page?: components["schemas"]["PageParam"];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * API Home
   * @description The home endpoint for this API. Displays basic informational message
   */
  apiHome: {
    responses: {
      /** @description A basic informational message about the search cards API */
      200: {
        content: {
          "application/json": components["schemas"]["APIWelcome"];
        };
      };
      /** @description bad request error */
      400: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
      /** @description client issued too many requests within the alloted time */
      429: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
      /** @description backend server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
    };
  };
  /**
   * List Cards
   * @description Search for, and list trading game cards that match a search term
   */
  searchCards: {
    parameters: {
      query: {
        term: components["parameters"]["searchTerm"];
        orderby?: components["parameters"]["orderBy"];
        sortdir?: components["parameters"]["sortDir"];
        page?: components["parameters"]["page"];
      };
    };
    responses: {
      /** @description A paged list of cards matching the search term */
      200: {
        content: {
          "application/json": components["schemas"]["CardsQueryResponse"];
        };
      };
      /** @description bad request error */
      400: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
      /** @description client issued too many requests within the alloted time */
      429: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
      /** @description backend server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
    };
  };
  /**
   * Authenticate a user
   * @description Authenticate a user with their nickname and password
   */
  authenticate: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AuthAttempt"];
      };
    };
    responses: {
      /** @description A list of cards marked as favorite by a user */
      200: {
        content: {
          "application/json": components["schemas"]["AuthToken"];
        };
      };
      /** @description bad request error */
      400: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
      /** @description client issued too many requests within the alloted time */
      429: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
      /** @description backend server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
    };
  };
  /**
   * Favorite Cards
   * @description Fetch trading game cards marked as favorites
   */
  getFavorites: {
    responses: {
      /** @description A list of cards marked as favorite by a user */
      200: {
        content: {
          "application/json": components["schemas"]["CardsQueryResponse"];
        };
      };
      /** @description bad request error */
      400: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
      /** @description client issued too many requests within the alloted time */
      429: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
      /** @description backend server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIResponseError"];
        };
      };
    };
  };
}
