openapi: '3.0.0'
info:
  version: 1.0.0
  title: Trading Cards MVP API
  description: |
    A simple REST API for searching and listing trading game cards
  license:
    name: MIT
servers:
  - url: 'http://127.0.0.1:8889'

tags: 
  - name: Search
    description: Search trading game cards
  - name: Users
    description: Create & authenticate users
  - name: Favs
    description: Fetch, mark, and unmark cards as favorites

paths:
  /:
    get:
      summary: API Home
      description: The home endpoint for this API. Displays basic informational message
      operationId: apiHome
      tags:
        - Search
      responses:
        '200':
          description: A basic informational message about the search cards API
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/APIWelcome"
        '400':
          description: bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"
        '429':
          description: client issued too many requests within the alloted time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"
        '500':
          description: backend server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"
  
  /search:
    get:
      summary: List Cards
      description: Search for, and list trading game cards that match a search term
      operationId: searchCards
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/searchTerm'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/page'

      responses:
        '200':
          description: A paged list of cards matching the search term
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/CardsQueryResponse"
        '400':
          description: bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"
        '429':
          description: client issued too many requests within the alloted time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"
        '500':
          description: backend server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"

  /users/auth:
    post:
      summary: Authenticate a user
      description: Authenticate a user with their nickname and password
      operationId: authenticate
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthAttempt"
      responses:
        '200':
          description: A list of cards marked as favorite by a user
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/AuthToken"
        '400':
          description: bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"
        '429':
          description: client issued too many requests within the alloted time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"
        '500':
          description: backend server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"

  /favorites:
    get:
      summary: Favorite Cards
      description: Fetch trading game cards marked as favorites
      operationId: getFavorites
      tags:
        - Favs
      responses:
        '200':
          description: A list of cards marked as favorite by a user
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/CardsQueryResponse"
        '400':
          description: bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"
        '429':
          description: client issued too many requests within the alloted time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"
        '500':
          description: backend server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseError"


components:

  parameters: 
    searchTerm:
      in: query
      name: term
      description: The search term to find cards with
      required: true
      schema:
        $ref: "#/components/schemas/SearchTermParam"

    orderBy:
      in: query
      name: orderby
      description: On what property to order the matching cards. Default is `name`
      required: false
      schema:
        $ref: "#/components/schemas/OrderByParam"

    sortDir:
      in: query
      name: sortdir
      required: false
      description: >
        The sort order of the returned cards. Default is `AUTO`
        Sort order:
          * `ASC` - Ascending, from A to Z
          * `DESC` - Descending, from Z to A
          * `AUTO` - Allow the system choose the most inuitive direction to sort.
      schema:
        $ref: "#/components/schemas/SortDirParam"

    page:
      in: query
      name: page
      description: The page of the matching resultset to return. Default is `1`.
      required: false
      schema:
        $ref: "#/components/schemas/PageParam"

  schemas:

    PageParam:
      type: integer
      minimum: 1
      maximum: 50
      example: 1
      default: 1

    SearchTermParam:
      type: string
      maxLength: 50
      minLength: 3
      # pattern: 
      example: pokey

    OrderByParam:
      type: string
      enum:
        - name
        - released
      default: name
      example: name

    SortDirParam:
      type: string
      enum:
        - ASC
        - DESC
        - AUTO
      default: AUTO
      example: AUTO

    APIWelcome:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          maxLength: 500
          example: 'Welcome to the API backend for the trading game cards MVP'

    CardImageURIs:
      type: object
      properties:
        small:
          type: string
          format: uri
          example: 'https://placehold.co/146x204?text=No+Image'
        normal:
          type: string
          format: uri
          example: 'https://placehold.co/488x680?text=No+Image'
        large:
          type: string
          format: uri
          example: 'https://placehold.co/666x927?text=No+Image'
    
    CardPrices:
      type: object
      properties:
        usd:
          type: string
          example: '0.25'
        eur:
          type: string
          example: '0.10'

    Card:
      type: object
      required:
        - id
        - uri
        - name
        - lang
        - prices
        - foil
        - rarity
        - nonfoil
        - set_name
        - image_uris
        - released_at
      properties:
        id:
          type: string
          example: d99a9a7d-d9ca-4c11-80ab-e39d5943a315
        lang:
          type: string
          maxLength: 5
          example: en
        name:
          type: string
          example: Aerial Predation
        uri:
          type: string
          example: d99a9a7d-d9ca-4c11-80ab-e39d5943a315
        rarity:
          type: string
          example: rare
        set_name:
          type: string
          example: Modern Horizons
        collector_number:
          type: number
          example: 186
        released_at:
          type: string
          format: date
          example: 2021-06-18
        games:
          type: array
          items:
            type: string
            example: mtgo
        image_uris:
          $ref: "#/components/schemas/CardImageURIs"
        nonfoil:
          type: boolean
        foil:
          type: boolean
        prices:
          $ref: "#/components/schemas/CardPrices"

    Pagination:
      type: object
      properties:
        next:
          type: string
          description: A link to the next page of responses if one exists
          example: '/search?term=red&page=3'
        previous:
          type: string
          description: A link to the previous page of responses if one exists
          example: '/search?term=red&page=1'

    QueryResult:
      type: object
      required:
        - total
        - data
      properties:
        total: 
          type: integer
          description: The total number of cards matching the search query
        data:
          type: array
          maxItems: 175
          minItems: 0
          items:
            $ref: "#/components/schemas/Card"
          description: A page of the cards matching the search query
    
    CardsQueryResponse:
      allOf:
        - $ref: "#/components/schemas/QueryResult"
        - $ref: "#/components/schemas/Pagination"

    AuthAttempt:
      type: object
      required:
        - nickname
        - password
      properties:
        nickname:
          type: string
          minLength: 5
          maxLength: 20
        password:
          type: string
          minLength: 5
          maxLength: 75

    AuthToken:
      type: object
      required:
        - token
      properties:
        token:
          type: string

    APIError:
      type: object
      properties:
        message:
          type: string
        path:
          type: string

    APIResponseError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          maxLength: 150
          description: The error message from the server
        code:
          type: integer
          minimum: 400
          maximum: 599
          pattern: ^\d{3,3}$
        errors:
          type: array
          items:
            $ref: "#/components/schemas/APIError"